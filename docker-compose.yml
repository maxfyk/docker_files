version: '2.1'

services:

  database:
    image: ivonet/mysql
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ../data/db:/var/lib/mysql
    restart: always
    ports:
      - "13306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASS}
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE:  youpar
    networks:
      - network
    healthcheck:
      test: mysql --user=root --password=$$MYSQL_ROOT_PASSWORD -e 'SHOW DATABASES;'
      interval: 1s
      timeout: 3s
      retries: 60

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
    environment:
      - node.name=elasticsearch
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - transport.host=localhost
      - bootstrap.system_call_filter=false
    ports:
      - 9200:9200
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ../data/elastic:/usr/share/elasticsearch/data
    networks:
      - network

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.2.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - network

  redis:
    image: redis
    restart: always
    networks:
      - network

#  dashboard:
#    build: ../rq_dashboard
#    restart: always
#    ports:
#      - "9181:9181"
#    command: rq-dashboard -H redis
#    depends_on:
#      - parer
#      - redis
#    networks:
#      - network

  parer:
    build: ../parer
    restart: always
    env_file:
      - .env
    command: python3 parer.py
    stdin_open: true
    tty: true
    volumes:
      - ./methods/:/usr/src/app/methods/
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_started
      kibana:
        condition: service_started
    networks:
      - network

  parer_api:
    build: ../parer_api
    restart: always
    env_file:
      - .env
    ports:
      - "5000:5000"
    command: gunicorn --workers ${API_WORKERS} --bind 0.0.0.0:5000 --timeout 120 wsgi:app
    stdin_open: true
    volumes:
      - ./methods/:/usr/src/app/methods/
    tty: true
    depends_on:
      - parer
      - redis
    networks:
      - network

  get_tasks:
    build: ../get_tasks
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 get_tasks.py runworker
    networks:
      - network

  get_videos:
    build: ../get_videos
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 get_videos.py runworker
    networks:
      - network

  get_tables:
    build: ../get_tables
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 get_tables.py runworker
    networks:
      - network

  write_videos:
    build: ../write_videos
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 write_videos.py runworker
    networks:
      - network

  write_comment:
    build: ../write_comment
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 write_comment.py runworker
    networks:
      - network

  write_tasks:
    build: ../write_tasks
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 write_tasks.py runworker
    networks:
      - network

  get_comments:
    build: ../get_comments
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 get_comments.py runworker
    networks:
      - network

  get_channels:
    build: ../get_channels
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 get_channels.py runworker
    networks:
      - network

  update_videos:
    build: ../update_videos
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 update_videos.py runworker
    networks:
      - network

  update_comment:
    build: ../update_comment
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 update_comment.py runworker
    networks:
      - network

  delete_comment:
    build: ../delete_comment
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 delete_comment.py runworker
    networks:
      - network

  write_channels:
    build: ../write_channels
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 write_channels.py runworker
    networks:
      - network

  write_tmp_table:
    build: ../write_tmp_table
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 write_tmp_table.py runworker
    networks:
      - network

  delete_task:
    build: ../delete_task
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 delete_task.py runworker
    networks:
      - network

  parse_channel:
    build: ../parse_channel
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 parse_channel.py runworker
    networks:
      - network

  parse_video:
    build: ../parse_video
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 parse_video.py runworker
    networks:
      - network

  enqueue_channel:
    build: ../enqueue_channel
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 enqueue_channel.py runworker
    networks:
      - network

  enqueue_video:
    build: ../enqueue_video
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 enqueue_video.py runworker
    networks:
      - network

  create_tmp_table:
    build: ../create_tmp_table
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 create_tmp_table.py runworker
    networks:
      - network

  delete_tmp_table:
    build: ../delete_tmp_table
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 delete_tmp_table.py runworker
    networks:
      - network

  get_tmp_table:
    build: ../get_tmp_table
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 get_tmp_table.py runworker
    networks:
      - network

  update_channels:
    build: ../update_channels
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
      - redis
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 update_channels.py runworker
    networks:
      - network


networks:
  network: {}


#database_1          | 2021-06-25T11:55:23.469511Z 39 [ERROR] InnoDB: Cannot create file './youpar/UCXuqSBlHAE6Xw@002dyeJA0Tunw_tmp.ibd'
#database_1          | 2021-06-25T11:55:23.469686Z 39 [ERROR] InnoDB: The file './youpar/UCXuqSBlHAE6Xw@002dyeJA0Tunw_tmp.ibd' already exists though the corresponding table did not exist in the InnoDB data dictionary. Have you moved InnoDB .ibd files around without using the SQL commands DISCARD TABLESPACE and IMPORT TABLESPACE, or did mysqld crash in the middle of CREATE TABLE? You can resolve the problem by removing the file './youpar/UCXuqSBlHAE6Xw@002dyeJA0Tunw_tmp.ibd' under the 'datadir' of MySQL.
