version: '2.1'

services:
  chromedriver:
    image: selenium/standalone-chrome
    privileged: true
    shm_size: 2g
    restart: always
    ports:
      - "4444:4444"
    networks:
      - network

  database:
    image: ivonet/mysql
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    ports:
      - "13306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASS}
      MYSQL_ROOT_HOST: '%'
    networks:
      - network
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
      interval: 1s
      timeout: 3s
      retries: 60

  redis:
    image: redis
    restart: always
    networks:
      - network

  parer:
    build: ../parer
    restart: always
    env_file:
      - .env
    command: python3 parer.py
    stdin_open: true
    tty: true
    volumes:
      - ./methods/:/usr/src/app/methods/
    depends_on:
      database:
        condition: service_healthy
    networks:
      - network

  parer_api:
    build: ../parer_api
    restart: always
    env_file:
      - .env
    ports:
      - "15000:5000"
    command: gunicorn --workers ${API_WORKERS} --bind 0.0.0.0:5000 --timeout 120 wsgi:app
    stdin_open: true
    volumes:
      - ./methods/:/usr/src/app/methods/
    tty: true
    depends_on:
      - parer
    networks:
      - network

  get_tasks:
    build: ../get_tasks
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 get_tasks.py runworker
    networks:
      - network

  get_channels:
    build: ../get_channels
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 get_channels.py runworker
    networks:
      - network

  write_channels:
    build: ../write_channels
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 write_channels.py runworker
    networks:
      - network

  write_tmp_table:
    build: ../write_tmp_table
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 write_tmp_table.py runworker
    networks:
      - network

  delete_task:
    build: ../delete_task
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 delete_task.py runworker
    networks:
      - network

  parse_channel:
    build: ../parse_channel
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 parse_channel.py runworker
    links:
      - chromedriver
    networks:
      - network

  create_tmp_table:
    build: ../create_tmp_table
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 create_tmp_table.py runworker
    links:
      - chromedriver
    networks:
      - network

# Delete tmp table
  get_tmp_table:
    build: ../get_tmp_table
    restart: always
    env_file:
      - .env
    depends_on:
      - parer
    volumes:
      - ./methods/:/usr/src/app/methods/
    command: python3 get_tmp_table.py runworker
    links:
      - chromedriver
    networks:
      - network

  dashboard:
    build: ../rq_dashboard
    restart: always
    ports:
      - "9181:9181"
    command: rq-dashboard -H redis
    depends_on:
      - parer
    networks:
      - network

networks:
  network: {}
